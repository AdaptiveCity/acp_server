<html>
  <head>
    <link rel="shortcut icon" type="image/x-icon" href="/static/favicon.ico"/>
    <title>RITA Console 0.44</title>
<style>
body {
   font-family: Tahoma, Verdana, Segoe, sans-serif;
}  

img {
   vertical-align: middle;
}

.header_title {
   color: #707070;
}

.status_area {
    display: inline-block;
    /* width: 100px; */
    /* height: 60px; */
    border-radius: 8px;
    text-align: center;
    vertical-align: middle;
    margin: 10px;
    padding: 5px;
}

#console1 {
    height: 400px;
    overflow: scroll;
}

</style>

<script>
// ******************************************************************************************************
// This JS console polls for messages from /console/status, in Json, published by server-side Console.java.
// Console.java provides the web server for this page.
// Message format from /console/status
//   { "module_name":"console",
//     "module_id":"test",
//     "status":[{"module_name":"feedhandler",
//                "module_id":"test",
//                "status":"UP",
//                "status_amber_seconds":15,
//                "status_red_seconds":25,
//                "ts":1475149281},
//                ...
//              ]
//   } 
//   where the status_amber-seconds and status_red_seconds are optional
//
// Current module status is maintained in the object 'module_status' e.g.
// module_status["console.A"] = { module_name: "console",
//                                module_id:   "A",
//                                status_amber_seconds: 15,
//                                status_red_seconds: 25,
//                                el:   < reference to page status element for this module>,
//                                ts: < utc timestamp of most recent UP message>,
//                                status: "UP"|"AMBER"|"RED"
//                               }
//
// Where possible, the console (server-side java and client javascript) doesn't need prior definition
// of the 'status reporting' modules, i.e. it will dynamically create a display block for any new module
// it hears from.
// ******************************************************************************************************

// Default constants for status timeouts for module from green->amber, and amber->red
// Note these threshold values can also be sent in the EB_SYSTEM_STATUS message
// i.e. if the console hasn't received an 'UP' status message in 35 seconds, it will treat the
// local status of that module as 'amber'
      
var STATUS_AMBER_SECONDS_DEFAULT = 35;
var STATUS_RED_SECONDS_DEFAULT = 65;

var API_STATUS = '/api/{{config_base_uri}}/status'; // http url to retrieve status as json
      
var status_areas; // div on page to hold status areas for each module
var console1; // console div on page for general purpose scrolling text messages
var clock; // element to display clock

var module_status = {}; // object to cache most recent status for each module
      
// Startup (called on page load)
// Initialize the eventbus connection to Console.java
// Register handlers for the eventbus messages
function init()
{
  // pre-cache page elements to be written to as status messages arrive
  status_areas = document.getElementById('status_areas');

  console1 = document.getElementById('console1');

  clock = document.getElementById('clock');

  // refresh all status buttons every 3 seconds
  setInterval(update_all_status, 3000);

  // update clock every second
  setInterval(update_clock, 1000);

} // end init()

function format_time(t)
{
      var hours = t.getHours();
      var mins = t.getMinutes();
      var secs = t.getSeconds();
      hours = hours < 10 ? '0'+hours : hours;
      mins = mins < 10 ? '0'+mins : mins;
      secs = secs < 10 ? '0'+secs : secs;
      return hours + ':' + mins + ':' + secs;
}

function format_status(module_name, module_id, t)
{
    return module_name+"<br/>"+module_id+"<br/>"+format_time(t);
}
                    
// We have just received a message on the EB_SYSTEM_STATUS address
// so update the appropriate 'status_area' on the page
function handle_status(status)
{
    //console.log('handle_status '+JSON.stringify(status));
                    
    var module_ref = status.module_name + "." + status.module_id;

    // Update status cache, create new entry if needed
    if (module_status.hasOwnProperty(module_ref))
        {
            // existing entry in cache, we just need to update timestamp
            module_status[module_ref].ts = status.ts;
        }
    else
        {
            // create new entry
            module_status[module_ref] = status;
        }           
}

function update_status(module_ref)
{                    
    // Create a new 'module_status' element if it doesn't already exist for current module

    //console.log('update_status module_status['+module_ref+']='+JSON.stringify(module_status[module_ref]));
                    
    if ( !module_status[module_ref].hasOwnProperty('el') )
    {
      log(console1, module_ref + " new module recognized");
    
      // create a new 'status_el' page element
      var status_el = document.createElement('DIV');
      status_el.setAttribute('class','status_area');
      status_el.setAttribute('id',module_ref);
  
      // add this status area to 'status_areas' document element
      status_areas.appendChild(status_el);
      // put this updated status with element ref back into module_status
      module_status[module_ref].el = status_el;
    }
    //console.log('update_status after el check module_status['+module_ref+']='+JSON.stringify(module_status[module_ref]));
    
    var status = module_status[module_ref];
                    
    // Set the "status_amber_seconds" and "status_red_seconds" properties for current module
    // either obtaining these values from the status message, or using the defaults on this page
    var status_amber_seconds = STATUS_AMBER_SECONDS_DEFAULT;
    if (status.hasOwnProperty("status_amber_seconds"))
      {
        status_amber_seconds = status.status_amber_seconds;
      }
    var status_red_seconds = STATUS_RED_SECONDS_DEFAULT;
    if (status.hasOwnProperty("status_red_seconds"))
      {
        status_red_seconds = status.status_red_seconds;
      }

    status.el.innerHTML = status.module_name+'<br/>'+
                status.module_id+'<br/>'+
                (new Date(status.ts*1000)).toLocaleTimeString();

    var seconds_since_ts = (new Date()).getTime()/1000 - status.ts;
    //console.log('seconds_since_ts '+seconds_since_ts);
                    
    if (seconds_since_ts > status_red_seconds)
      {
        if (module_status[module_ref].status!="RED")
        {
            module_status[module_ref].status = "RED";
            log(console1, module_ref + " status now RED");
        }
        status.el.setAttribute("style", "background-color: red; color: black");
      }
    else if (seconds_since_ts > status_amber_seconds)
      {
        status.el.setAttribute("style", "background-color: yellow; color: black");
      }
    else
      {
        if (module_status[module_ref].status!="UP")
        {
            module_status[module_ref].status = "UP";
            log(console1, module_ref + " status now UP");
        }
        status.el.setAttribute("style", "background-color: green; color: white");
      }
} // end handle_status()

function update_clock()
{
    clock.innerHTML = format_time(new Date());
}

// general http GET function
// retrieves /api/console/status        
// 
var call_tfc_api = function(url, callback) {
            var xhr = new XMLHttpRequest();
            try {
                // here is where we GET the /console/status content
                xhr.open('get', url, true);
                xhr.responseType = 'text';
                xhr.onload = function() {
                  var status = xhr.status;
                  if (status == 200) {
                    callback(null, xhr.responseText);
                  } else {
                    callback(status);
                  }
                };
                xhr.send();
            }
            catch (ex)
            {
              console.log('Exception in send()');
            }
        };

// Update all the module status areas, called (in init) every 3 seconds
function update_all_status()
  {
    // first an ASYNCHRONOUS get of the status data from the server
    call_tfc_api( API_STATUS, function (err, data) {
                  if (err != null)
                      {
                        console.log( 'get_status failed '+err);
                      }
                  else
                      {
                        //console.log( ' GET /console/status succeeded');
                        //console.log('data='+data);
                        var data_obj = JSON.parse(data);
                        //console.log('data module_name='+data_obj.module_name);
                        var status_array = data_obj.status;
                        for (var i=0; i < status_array.length; i++)
                          {
                            //console.log("Updating "+JSON.stringify(status_array[i]));
                            handle_status(status_array[i]);
                          }
                      }
                });
     // The iterate through the module_status cache and update elements on the page.
     // Note as above get is async, we may not have the latest status here, but will next time around...
     for (var p in module_status)
     {
         if (module_status.hasOwnProperty(p))
             {
               update_status(p);
             }
     }
  }

// General purpose function to append text to div on screen, used for general console messages.
// In particular, often used for messages from "console_out" address as these are more general
function log(console_div, text)
  {
    //console.log(text);
    var dateobj = new Date();
    var year = dateobj.getFullYear();
    var month= ("0" + (dateobj.getMonth()+1)).slice(-2);
    var date = ("0" + dateobj.getDate()).slice(-2);
    var hours = ("0" + dateobj.getHours()).slice(-2);
    var minutes = ("0" + dateobj.getMinutes()).slice(-2);
    var seconds = ("0" + dateobj.getSeconds()).slice(-2);

    var log_date = year+'-'+month+'-'+date+' '+hours+':'+minutes+':'+seconds;
                      
    console_div.innerHTML = console_div.innerHTML + log_date +' '+text+'<br/>';
    console_div.scrollTop = console_div.scrollHeight;
  }


</script>

</head>
  <body onload="init()">
    <h1 class="header_title"><img src="/static/images/smart_cambridge_logo.jpg">Rita::Console.{{config_module_id}} {{config_eb_system_status}}<span id='heading'></span></h1>
    <div id="status_areas">
      <h4>Module Status <span id="clock"></span></h4>
    </div>
    <h4>Console messages</h4>
    <div id="console1">
    </div>
  </body>
</html>
