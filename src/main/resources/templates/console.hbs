<html>
  <head>
    <script src='/static/sockjs.min.js'></script>
    <script src='/static/vertx-eventbus.js'></script>
    <link rel="shortcut icon" type="image/x-icon" href="/static/favicon.ico"/>
    <title>RITA Console 0.32</title>
<style>
body {
   font-family: Tahoma, Verdana, Segoe, sans-serif;
}  

img {
   vertical-align: middle;
}

.header_title {
   color: #707070;
}

.status_area {
    display: inline-block;
    /* width: 100px; */
    /* height: 60px; */
    border-radius: 8px;
    text-align: center;
    vertical-align: middle;
    margin: 10px;
    padding: 5px;
}
</style>

<script>
  // ******************************************************************************************************
  // This JS console receives messages from the Vertx eventbus, published by server-side Console.java.
  // Console.java provides both the web server for this page, and the eventbus bridge to this javascript.
  //
  // Message format on the 'system status' eventbus address
  //   { "module_name": "console",
  //     "module_id": <whatever unique identifier this instance has>,
  //     "status": "UP" ,
  //     "status_amber_seconds": 35,
  //     "status_red_seconds": 65 }
  //   where the status_amber-seconds and status_red_seconds are optional
  //
  // Where possible, the console (server-side java and client javascript) doesn't need prior definition
  // of the 'status reporting' modules, i.e. it will dynamically create a display block for any new module
  // it hears from.
  // ******************************************************************************************************

  // Constant address of server-side eventbus bridge

  // Set base URL of web server
  var CONSOLE_HTTP = window.location.href; // window.location.protocol + '//' +
                      // window.location.hostname +
                      // ':' + window.location.port;

  // Extend base URL for eventbus address
  var CONSOLE_EVENTBUS_HTTP =  CONSOLE_HTTP + '/eb';

  // System eventbus address for system status messages
  // Handlebars template var populated by config.java
  var EB_SYSTEM_STATUS = '{{config_eb_system_status}}';
    
  // Default constants for status timeouts for module from green->amber, and amber->red
  // Note these threshold values can also be sent in the EB_SYSTEM_STATUS message
  // i.e. if the console hasn't received an 'UP' status message in 35 seconds, it will treat the
  // local status of that module as 'amber'
  var STATUS_AMBER_SECONDS_DEFAULT = 35;
  var STATUS_RED_SECONDS_DEFAULT = 65;
  
  var eb; // eventbus
  var status_areas; // div on page to hold status areas for each module
  var console1; // console div on page for general purpose scrolling text messages
  var clock; // element to display clock
  
  // Object to hold current status of each module (e.g. feedhandler, zone, feedcsv, console)
  var module_status = {};
  
  // Startup (called on page load)
  // Initialize the eventbus connection to Console.java
  // Register handlers for the eventbus messages
  function init()
    {
      // initialize eventbus to connect to Console.java on server
      eb = new EventBus(CONSOLE_EVENTBUS_HTTP);

      // pre-cache page elements to be written to as status messages arrive
      status_areas = document.getElementById('status_areas');

      console1 = document.getElementById('console1');

      clock = document.getElementById('clock');

      // script to run when Vertx EventBus is ready
      eb.onopen = function() {

        // Set a handler to receive a 'system status' message
        // on the address passed to page by Console.java on startup
        eb.registerHandler(EB_SYSTEM_STATUS, handle_status );

      }

      // refresh all status buttons every 3 seconds
      setInterval(update_all_status, 3000);
  
      // update clock every second
      setInterval(update_clock, 1000);
  
  } // end init()

// We have just received a message on the EB_SYSTEM_STATUS address
// so update the appropriate 'status_area' on the page
function handle_status(error,message)
{

    //log(console1, message.body);
    
    var status = JSON.parse(message.body);

    if (!status.hasOwnProperty('module_id'))
    {
      status.module_id = '';
    }
    
    var module_ref = status.module_name + "." + status.module_id;

    // Create a new 'module_status' object if it doesn't already exist for current module
    // and add a status area on the page for it.
    if (!module_status.hasOwnProperty(module_ref))
    {
      // create a new module_status object
      module_status[module_ref] = { };

      module_status[module_ref].name = status.module_name;
      module_status[module_ref].id = status.module_id;
    
      // create a new 'status_area' page element
      var status_area = document.createElement('DIV');
      status_area.setAttribute('class','status_area');
      status_area.setAttribute('id',module_ref);
//      status_area.innerHTML = format_status(status.module_name + '<br/>' + status.module_id;
  
      // add this status area to 'status_areas' document element
      status_areas.appendChild(status_area);

      // create a new module_status object
      module_status[module_ref].el = document.getElementById(module_ref);
    }
    
    // put timestamp into module_status
    module_status[module_ref].heartbeat = new Date();
    
    // Set the "status_amber_seconds" and "status_red_seconds" properties for current module
    // either obtaining these values from the status message, or using the defaults on this page
    // status_amber_seconds:
    if (!module_status[module_ref].hasOwnProperty("status_amber_seconds"))
    {
      if (status.hasOwnProperty("status_amber_seconds"))
      {
        module_status[module_ref].status_amber_seconds = status.status_amber_seconds;
      }
      else
      {
        module_status[module_ref].status_amber_seconds = STATUS_AMBER_SECONDS_DEFAULT;
      }
    }
    // status_red_seconds:
    if (!module_status[module_ref].hasOwnProperty("status_red_seconds"))
    {
      if (status.hasOwnProperty("status_red_seconds"))
      {
        module_status[module_ref].status_red_seconds = status.status_red_seconds;
      }
      else
      {
        module_status[module_ref].status_red_seconds = STATUS_RED_SECONDS_DEFAULT;
      }
    }

    update_status(module_ref);
    //log(console1, 'system_status: ' + message.body);
} // end handle_status()
  
function format_time(t)
{
      var hours = t.getHours();
      var mins = t.getMinutes();
      var secs = t.getSeconds();
      hours = hours < 10 ? '0'+hours : hours;
      mins = mins < 10 ? '0'+mins : mins;
      secs = secs < 10 ? '0'+secs : secs;
      return hours + ':' + mins + ':' + secs;
}

function format_status(module_name, module_id, t)
{
    return module_name+"<br/>"+module_id+"<br/>"+format_time(t);
}
                    
// Update the status area for a given module reference
function update_status(module_ref)
{
      var t = module_status[module_ref].heartbeat;
      //console.log(str_time);
      
      module_status[module_ref].el.innerHTML = module_status[module_ref].name+'<br/>'+
                    module_status[module_ref].id+'<br/>'+
                    format_time(t);
      
      var seconds_since_heartbeat = ((new Date()).getTime() - module_status[module_ref].heartbeat.getTime())/1000;
      if (seconds_since_heartbeat > module_status[module_ref].status_red_seconds)
      {
        module_status[module_ref].el.setAttribute("style", "background-color: red");
      }
      else if (seconds_since_heartbeat > module_status[module_ref].status_amber_seconds)
      {
        module_status[module_ref].el.setAttribute("style", "background-color: yellow");
      }
      else
      {
        module_status[module_ref].el.setAttribute("style", "background-color: green");
      }
} // end update_status()

function update_clock()
{
    clock.innerHTML = format_time(new Date());
}

// Update all the module status areas
function update_all_status()
  {
    for (var p in module_status)
    {
      //console.log("Updating "+p);
      update_status(p);
    }
  }

// General purpose function to append text to div on screen, used for general console messages.
// In particular, often used for messages from "console_out" address as these are more general
function log(console_div, text)
  {
    //console.log(text);
    console_div.innerHTML = console_div.innerHTML + (new Date().toTimeString())+' '+text+'<br/>';
  }


</script>

</head>
  <body onload="init()">
    <h1 class="header_title"><img src="/static/images/smart_cambridge_logo.jpg">Rita::Console.{{config_module_id}} {{config_eb_system_status}}<span id='heading'></span></h1>
    <div id="status_areas">
      <h4>Module Status <span id="clock"></span></h4>
    </div>
    <div id="console1">
      <h4>Console messages</h4>
    </div>
  </body>
</html>
